<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on 化道两千</title>
    <link>http://localhost:1313/docs/interview/javascript/</link>
    <description>Recent content in JavaScript on 化道两千</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright (c) 2020-2024 Hyas</copyright>
    <lastBuildDate>Thu, 11 Apr 2024 14:05:04 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/docs/interview/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>说说对 Promise 的理解</title>
      <link>http://localhost:1313/docs/interview/javascript/%E8%AF%B4%E8%AF%B4%E5%AF%B9-promise-%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 09 Apr 2024 17:16:36 +0800</pubDate>
      <guid>http://localhost:1313/docs/interview/javascript/%E8%AF%B4%E8%AF%B4%E5%AF%B9-promise-%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>1. 介绍 Promise 意为承诺，是异步编程的一种解决方案，比传统的回调函数更合理、强大。&#xA;在以前处理多层异步操作时，我们通常会这样编写代码：&#xA;doSomething(function(result) { doSomethingElse(result, function(newResult) { doThridThing(newResult, function(finalResult) { console.log(&amp;#34;得到最终结果: &amp;#34; + finalResult); }, failureCallback); }, failureCallback); }, failureCallback);&#xD;上面的代码阅读困难，这就是经典的回调地狱。</description>
    </item>
    <item>
      <title>说说对闭包的理解</title>
      <link>http://localhost:1313/docs/interview/javascript/%E8%AF%B4%E8%AF%B4%E5%AF%B9%E9%97%AD%E5%8C%85%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Thu, 11 Apr 2024 01:47:55 +0800</pubDate>
      <guid>http://localhost:1313/docs/interview/javascript/%E8%AF%B4%E8%AF%B4%E5%AF%B9%E9%97%AD%E5%8C%85%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>1. 介绍 闭包就是一个函数与其词法环境（lexical environment）的引用绑在一起。&#xA;也就是说，闭包就是能够读取其他函数内部变量的函数；或是子函数在外调用，子函数所在的父函数的作用域不会被释放。&#xA;在 JavaScript 中，闭包会在满足条件的函数创建时被创建。下面给出一个简单的例子：&#xA;function init() { let name = &amp;#34;Mozilla&amp;#34;; // init 内部的局部变量 function displayName() { // 创建了一个闭包，displayName 是内层函数 alert(name); // 使用了父函数中声明的变量 } displayName(); // 使用闭包 } init();&#xD;displayName() 虽然没有自己的局部变量，但是由于闭包的特性，它可以访问到外部函数的局部变量。</description>
    </item>
    <item>
      <title>数组的常用方法</title>
      <link>http://localhost:1313/docs/interview/javascript/%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 11 Apr 2024 14:05:04 +0800</pubDate>
      <guid>http://localhost:1313/docs/interview/javascript/%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>假设我们这里的操作都以默认数组 fruits 为对象：&#xA;const fruits = [&amp;#34;Apple&amp;#34;, &amp;#34;Banana&amp;#34;];&#xD;1.增 向数组末尾追加一个新元素 push() 向数组末尾追加一个新元素，返回新的数组长度。&#xA;const newLength = fruits.push(&amp;#34;Orange&amp;#34;); console.log(fruits); // [ &amp;#39;Apple&amp;#39;, &amp;#39;Banana&amp;#39;, &amp;#39;Orange&amp;#39; ] console.</description>
    </item>
  </channel>
</rss>
